CMAKE_MINIMUM_REQUIRED(VERSION 3.14)

SET(CMAKE_SYSTEM_NAME Generic)
SET(CMAKE_SYSTEM_VERSION 0)
SET(CMAKE_C_COMPILER_WORKS TRUE)
SET(CMAKE_CXX_COMPILER_WORKS TRUE)

# 设置编译器
SET(CMAKE_C_COMPILER "clang")
SET(CMAKE_CXX_COMPILER "clang")

IF (SJR_OS_WINDOWS)
    SET(CMAKE_AR "llvm-ar")
ENDIF ()

IF (SJR_OS_LINUX)
    IF (SJR_OS_ANDROID)
        SET(SJR_ANDROID_LINK "-fuse-ld=${3RD_NDK}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ld.gold")
    ELSE ()
        SET(SJR_LINUX_LINK "-fuse-ld=ld")
    ENDIF ()
ELSEIF (SJR_OS_WINDOWS)
    IF (SJR_OS_ANDROID)
        SET(SJR_ANDROID_LINK "-fuse-ld=${3RD_NDK}/toolchains/arm-linux-androideabi-4.9/prebuilt/windows-x86_64/bin/arm-linux-androideabi-ld.gold")
    ELSE ()
        SET(SJR_WINDOWS_LINK "")
    ENDIF ()
ENDIF ()

IF (SJR_IS_RELEASE)
    SET(SJR_FLAGS "-Os")
ELSE ()
    SET(SJR_FLAGS "-O0 -g")
ENDIF ()

# 清空 flags 初始化
IF (SJR_OS_ANDROID)
    SET(CMAKE_C_FLAGS_INIT "--target=armv7-none-linux-androideabi -std=c99 -fPIC -mthumb -fvisibility=hidden --sysroot=${3RD_NDK}/platforms/android-19/arch-arm ${SJR_FLAGS}")
    SET(CMAKE_CXX_FLAGS_INIT "--target=armv7-none-linux-androideabi -std=c++17 -fPIC -mthumb -fvisibility=hidden -fno-exceptions -fno-rtti --sysroot=${3RD_NDK}/platforms/android-19/arch-arm ${SJR_FLAGS}")
ELSEIF (SJR_OS_LINUX)
    SET(CMAKE_C_FLAGS_INIT "-std=c99 ${SJR_FLAGS} -fPIC")
    SET(CMAKE_CXX_FLAGS_INIT "-std=c++17 -fno-exceptions -fno-rtti ${SJR_FLAGS} -fPIC")
ELSEIF (SJR_OS_WINDOWS)
    SET(CMAKE_C_FLAGS_INIT "-std=c99 ${SJR_FLAGS}")
    SET(CMAKE_CXX_FLAGS_INIT "-std=c++17 -fno-exceptions -fno-rtti ${SJR_FLAGS}")
ENDIF ()

# 重置设备Obj文件生成规则
SET(CMAKE_C_COMPILE_OBJECT "<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>")
SET(CMAKE_CXX_COMPILE_OBJECT "<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -o <OBJECT> -c <SOURCE>")

# 重置可执行文件生成规则
IF (SJR_OS_ANDROID)
    SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> ${CMAKE_C_FLAGS_INIT} ${SJR_ANDROID_LINK} -Wl,--no-undefined <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
    SET(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> ${CMAKE_CXX_FLAGS_INIT} ${SJR_ANDROID_LINK} -Wl,--no-undefined <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
ELSEIF (SJR_OS_LINUX)
    SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> ${CMAKE_C_FLAGS_INIT} ${SJR_LINUX_LINK} -Wl,--no-undefined <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
    SET(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> ${CMAKE_CXX_FLAGS_INIT} ${SJR_LINUX_LINK} -Wl,--no-undefined <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
ELSEIF (SJR_OS_WINDOWS)
    SET(CMAKE_C_LINK_EXECUTABLE "<CMAKE_C_COMPILER> ${SJR_WINDOWS_C_FLAGS} ${SJR_WINDOWS_LINK} <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
    SET(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> ${SJR_WINDOWS_CXX_FLAGS} ${SJR_WINDOWS_LINK} <OBJECTS> -o <TARGET> <LINK_LIBRARIES>")
ENDIF ()

# 因为是假设为嵌入式无系统环境,这种情况是无法直接使用链接器的,但是会去调用静态库打包,所以这里重写了静态库打包规则。
IF (SJR_OS_ANDROID)
    SET(CMAKE_C_ARCHIVE_CREATE "<CMAKE_C_COMPILER> ${CMAKE_C_FLAGS_INIT} ${SJR_ANDROID_LINK} -shared -Wl,-soname=<TARGET> -Wl,--no-undefined <OBJECTS> -o <TARGET> <LINK_FLAGS>")
    SET(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_CXX_COMPILER> ${CMAKE_CXX_FLAGS_INIT} ${SJR_ANDROID_LINK} -shared -Wl,-soname=<TARGET> -Wl,--no-undefined <OBJECTS> -o <TARGET> <LINK_FLAGS>")
ELSEIF (SJR_OS_LINUX)
    SET(CMAKE_C_ARCHIVE_CREATE "<CMAKE_C_COMPILER> ${CMAKE_C_FLAGS_INIT} ${SJR_LINUX_LINK} -shared -Wl,-soname=<TARGET> <OBJECTS> -Wl,--no-undefined -o <TARGET> <LINK_FLAGS>")
    SET(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_CXX_COMPILER> ${CMAKE_CXX_FLAGS_INIT} ${SJR_LINUX_LINK} -shared -Wl,-soname=<TARGET> <OBJECTS> -Wl,--no-undefined -o <TARGET> <LINK_FLAGS>")
ELSEIF (SJR_OS_WINDOWS)
    SET(CMAKE_C_ARCHIVE_CREATE "<CMAKE_C_COMPILER> ${SJR_WINDOWS_C_FLAGS} ${SJR_WINDOWS_LINK} -shared <OBJECTS> -o <TARGET> <LINK_FLAGS>")
    SET(CMAKE_CXX_ARCHIVE_CREATE "<CMAKE_CXX_COMPILER> ${SJR_WINDOWS_CXX_FLAGS} ${SJR_WINDOWS_LINK} -shared <OBJECTS> -o <TARGET> <LINK_FLAGS>")
ENDIF ()

# 因为是使用静态库打包规则,会去调用ranlib,所以这里清空。
SET(CMAKE_C_ARCHIVE_FINISH "")
SET(CMAKE_CXX_ARCHIVE_FINISH "")

SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
